name: "install-flox-action test"
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  simple-build:
    strategy:
      matrix:
        os: ["ubuntu-latest"] # macos not yet populated
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: "actions/checkout@v3"
      - name: "Install flox"
        uses: "./"
        with:
          cache-key: "install-flox-action-test"

      - name: "Build hello"
        shell: "bash"
        run: "nix build nixpkgs#hello"

      - shell: "bash"
        run: "save-built"

  simple-cache-test:
    name: simple-cache-test ${{ matrix.package }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - package: hello
          - package: jq

    steps:
      - uses: "actions/checkout@v3"
      - name: Install flox
        uses: "./"
        with:
          cache-key: "install-flox-action-simple-cache-test-${{ matrix.package }}"

      # slows this test down, allows us to test behavior with and without the cache
      - name: Clean cache
        run: |
          sudo rm -rf /tmp/nixcache

      - name: Build
        run: |
          nix build --json -L --print-out-paths --impure --expr 'with builtins; with getFlake "nixpkgs"; legacyPackages."${currentSystem}"."${{ matrix.package }}".overrideAttrs (oldAttrs: { pname = oldAttrs.pname + "-unique"; })'
          write-built $(readlink ./result*)

      - name: Cache
        run: |
          save-built

      - name: Clean results
        run: |
          rm -rf result*

      - name: Collect garbage
        run: |
          nix store gc

      - name: Build with caching
        run: |
          nix build -j0 --json -L --print-out-paths --impure --expr 'with builtins; with getFlake "nixpkgs"; legacyPackages."${currentSystem}"."${{ matrix.package }}".overrideAttrs (oldAttrs: { pname = oldAttrs.pname + "-unique"; })'
