name: "Install flox"
description: "Installs flox on GitHub Actions for the supported platforms: GNU/Linux and macOS."
author: "flox"

branding:
  color: "blue"
  icon: "moon"

inputs:
  github-access-token:
    description: "GitHub access token to use when using the GitHub fetcher"
  ssh-key:
    description: "SSH key to use when fetching over SSH"
  ssh-key-format:
    description: "Format of ssh-key or format to generate"
    default: "ed25519"
  ssh-auth-sock:
    description: "Used to set SSH_AUTH_SOCK variable, used by some Nix fetchers"
  cache-key:
    description: "Cache key to use for retaining the Nix store"
  existing-nix:
    description: "If we should utilize the pre-installed Nix instead of adding our own"
  substituter:
    description: "Default substituter to use for uploads"
  substituter-options:
    description: "Default substituter options"
    default: "?secret-key=/tmp/secret-key&write-nar-listing=1&ls-compression=br"
  substituter-key:
    description: "Substituter key created by `nix key generate-secret`"
  aws-access-key-id:
    description: "AWS access key to upload"
  aws-secret-access-key:
    description: "AWS secret key to upload"
  floxpkgs-uri:
    description: |
      URI to use when resolving `flox` executable.
      Ignored if `flox-installable-uri` is given.
    default: "github:flox/floxpkgs"
  flox-installable-uri:
    required: false
    description: |
      Absolute installable URI to `flox` executable.
      Takes precedence over `floxpkgs-uri` setting.
  nix_install_url:
    description: |
      URL for the `nix` installer to use.
      This allows you to select alternative `nix` versions
      from the list at https://releases.nixos.org/nix/.
      To use the _latest_ stable release you may set this to
      https://nixos.org/nix/install.
    default: 'https://releases.nixos.org/nix/nix-2.15.2/install'


runs:
  using: "composite"

  steps:
    - uses: "cachix/install-nix-action@v22"
      if: "inputs.existing_nix != 'true'"
      with:
        install_url: ${{ inputs.nix_install_url }}
        github_access_token: "${{ inputs.github-access-token }}"
        extra_nix_config: |
          experimental-features = nix-command flakes
          max-jobs = auto
          cores = 0
          builders-use-substitutes = true
          fallback = true
          connect-timeout = 5
          stalled-download-timeout = 90

    - name: "Fix Nix credentials"
      shell: "bash"
      run: "${{ github.action_path }}/fix-nix-credentials.sh"
      env:
        INPUTS_SSH_KEY_FORMAT: "${{ inputs.ssh-key-format }}"
        INPUTS_SSH_KEY: "${{ inputs.ssh-key }}"
        INPUTS_SSH_AUTH_SOCK: "${{ inputs.ssh-auth-sock }}"
        INPUTS_GITHUB_ACCESS_TOKEN: "${{ inputs.github-access-token }}"

    - name: "Create Nix store cache"
      uses: "actions/cache@v3.0.8"
      id: "nix-cache"
      if: "inputs.cache-key != ''"
      with:
        path: "/tmp/nixcache"
        key: "${{ inputs.cache-key }}"

    - name: "Import Nix store cache"
      if: "steps.nix-cache.outputs.cache-hit == 'true'"
      shell: "bash"
      run: |
        nix-store --import < /tmp/nixcache

    - name: "Install flox"
      shell: "bash"
      env:
        FLOXPKGS_URI: "${{ inputs.floxpkgs-uri }}"
        FLOX_INSTALLABLE_URI: "${{ inputs.flox-installable-uri }}"
      run: "${{ github.action_path }}/install-flox.sh"

    - name: "Setup substituter"
      if: "inputs.substituter != ''"
      shell: "bash"
      run: "${{ github.action_path }}/configure-substituter.sh"
      env:
        INPUT_SUBSTITUTER: "${{ inputs.substituter }}"
        INPUT_SUBSTITUTER_KEY: "${{ inputs.substituter-key }}"
        INPUT_SUBSTITUTER_OPTIONS: "${{ inputs.substituter-options }}"
        INPUT_AWS_ACCESS_KEY_ID: "${{ inputs.aws-access-key-id }}"
        INPUT_AWS_SECRET_ACCESS_KEY: "${{ inputs.aws-secret-access-key }}"


    - name: "Enable using Nix post-build-hook on each built path"
      if: "inputs.post-build-hook != ''"
      shell: "bash"
      run: |
        echo '${{ inputs.post-build-hook }}' | sudo tee -a /tmp/post-build-hook
        echo "post-build-hook = /etc/nix/post-build-hook" | sudo tee -a /etc/nix/nix.conf
        sudo chmod +x /tmp/post-build-hook

    - name: "Enable exporting Nix store to cache"
      if: "inputs.cache-key != ''"
      shell: "bash"
      run: |
        echo "post-build-hook = ${{ github.action_path }}/write-built.sh" | sudo tee -a /etc/nix/nix.conf
        mkdir -p "$HOME/.local/bin"
        cp '${{ github.action_path }}/save-built.sh' "$HOME/.local/bin/save-built"
        echo "PATH=$PATH:$HOME/.local/bin" > "$GITHUB_ENV"

        # Run this at the start to make sure the cache works, and to get flox itself cached
        ${{ github.action_path }}/save-built.sh
