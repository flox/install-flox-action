name: "Install flox"
description: "Installs flox on GitHub Actions for the supported platforms: GNU/Linux and macOS."
author: "flox"

branding:
  color: "blue"
  icon: "moon"

inputs:
  github-access-token:
    description: "GitHub access token to use when using the GitHub fetcher"
  ssh-key:
    description: "SSH key to use when fetching over SSH"
  ssh-key-format:
    description: "Format of ssh-key or format to generate"
    default: "ed25519"
  ssh-auth-sock:
    description: "Used to set SSH_AUTH_SOCK variable, used by some Nix fetchers"
  cache-key:
    description: "Cache key to use for retaining the Nix store"
  existing-nix:
    description: "If we should utilize the pre-installed Nix instead of adding our own"
  substituter:
    description: "Default substituter to use for uploads"
  substituter-options:
    description: "Default substituter options"
    default: "?secret-key=/tmp/secret-key&write-nar-listing=1&ls-compression=br"
  substituter-key:
    description: "Substituter key created by `nix key generate-secret`"
  aws-access-key-id:
    description: "AWS access key to upload"
  aws-secret-access-key:
    description: "AWS secret key to upload"

runs:
  using: "composite"

  steps:
    - name: "Create Nix store cache"
      uses: "actions/cache@v3.0.8"
      id: "nix-cache"
      if: "inputs.cache-key != ''"
      with:
        path: "/tmp/nixcache"
        key: "ver_2_${{ inputs.cache-key }}"

    - name: "Generating Nix config"
      shell: bash
      id: make_nix_config
      env:
        INPUT_SUBSTITUTER: "${{ inputs.substituter }}"
        INPUT_USE_LOCAL_CACHE: 1 # TODO if cache key
      run: |
        echo "out<<EOF" >> "$GITHUB_OUTPUT"

        {
        cat <<EOF
        experimental-features = nix-command flakes
        max-jobs = auto
        cores = 0
        builders-use-substitutes = true
        fallback = true
        connect-timeout = 5
        stalled-download-timeout = 90
        EOF
        } >> "$GITHUB_OUTPUT"

        SUBSTITUTERS=()

        if [ "${INPUT_USE_LOCAL_CACHE}" = "1" ]; then
          SUBSTITUTERS+=("file:///tmp/nixcache?trusted=1")
          echo "post-build-hook = ${{ github.action_path }}write-built.sh" >> "$GITHUB_OUTPUT"
          # so nix-daemon knows where the temp dir is, used for saving store paths
          sudo systemctl import-environment RUNNER_TEMP
          # ensure it works, and make the file exist
          ${{ github.action_path }}/write-built.sh
        fi

        if [ -n "${INPUT_SUBSTITUTER}" ]; then
          SUBSTITUTERS+=("${INPUT_SUBSTITUTER}")
        fi

        if [ -n "${SUBSTITUTERS}" ]; then
          echo "extra-substituters = ${SUBSTITUTERS[@]}" >> "$GITHUB_OUTPUT"
        fi

        echo "EOF" >> "$GITHUB_OUTPUT"

    - uses: "cachix/install-nix-action@v21"
      if: "inputs.existing_nix != 'true'"
      with:
        github_access_token: "${{ inputs.github-access-token }}"
        extra_nix_config: "${{ steps.make_nix_config.outputs.out }}"

    - name: "Fix Nix credentials"
      shell: "bash"
      run: "${{ github.action_path }}/fix-nix-credentials.sh"
      env:
        INPUTS_SSH_KEY_FORMAT: "${{ inputs.ssh-key-format }}"
        INPUTS_SSH_KEY: "${{ inputs.ssh-key }}"
        INPUTS_SSH_AUTH_SOCK: "${{ inputs.ssh-auth-sock }}"
        INPUTS_GITHUB_ACCESS_TOKEN: "${{ inputs.github-access-token }}"

    - name: "Install flox"
      shell: "bash"
      run: "${{ github.action_path }}/install-flox.sh"

    - name: "Setup substituter credentials"
      if: "inputs.substituter != ''"
      shell: "bash"
      run: "${{ github.action_path }}/configure-substituter.sh"
      env:
        INPUT_SUBSTITUTER: "${{ inputs.substituter }}"
        INPUT_SUBSTITUTER_KEY: "${{ inputs.substituter-key }}"
        INPUT_SUBSTITUTER_OPTIONS: "${{ inputs.substituter-options }}"
        INPUT_AWS_ACCESS_KEY_ID: "${{ inputs.aws-access-key-id }}"
        INPUT_AWS_SECRET_ACCESS_KEY: "${{ inputs.aws-secret-access-key }}"

    - name: "Enable exporting Nix store to cache"
      if: "inputs.cache-key != ''"
      shell: "bash"
      run: |
        mkdir -p "$HOME/.local/bin"
        cp '${{ github.action_path }}/save-built.sh' "$HOME/.local/bin/save-built"
        cp '${{ github.action_path }}/write-built.sh' "$HOME/.local/bin/write-built"

        echo "PATH='$PATH:$HOME/.local/bin'" >> "$GITHUB_ENV"
        echo "$HOME/.local/bin" > "$GITHUB_PATH"

        # Run this at the start to make sure the cache works, and to get flox itself cached
        ${{ github.action_path }}/write-built.sh "$(readlink -f "$(which flox)")"
        ${{ github.action_path }}/save-built.sh


